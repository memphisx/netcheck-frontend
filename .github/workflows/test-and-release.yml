on: [push]
name: Test and release

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Install dependencies
        run: yarn install
      - name: Run tests
        run: yarn test

  release:
    name: Publish Github Release
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v2
      - name: Install dependencies
        run: yarn install
      - name: Install Quasar globally
        run: npm install -g @quasar/cli
      - name: Build and package to zip
        run: |
          echo "VERSION=`cat version.txt`" >> .env
          quasar build
          mkdir zip
          cd dist/spa/
          zip -r ../../zip/spa-release.zip .
          cd ../../
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      - name: Publish Release on GitHub
        run: |
          go get github.com/tcnksm/ghr
          /home/runner/go/bin/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${GITHUB_ACTOR} -r ${{ github.event.repository.name }} -c ${GITHUB_SHA} -delete `cat ./version.txt` ./zip/

  push-to-dockerhub:
    name: Publish docker image to hub.docker.com
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v2
      - name: Install dependencies
        run: yarn install
      - name: Install Quasar globally
        run: npm install -g @quasar/cli
      - name: Build SPA
        run: |
          echo "VERSION=`cat version.txt`" >> .env
          quasar build
      - name: Replace dockerfile
        run: rm ./Dockerfile && mv ./nginx.Dockerfile ./Dockerfile
      - name: install buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: build the image
        run: |
          echo "VERSION=`cat version.txt`" >> .env
          docker buildx build --push --tag ${{ secrets.DOCKER_IMAGE_NAME }}:latest --tag ${{ secrets.DOCKER_IMAGE_NAME }}:`cat ./version.txt` --platform linux/amd64,linux/arm/v7,linux/arm64 .

